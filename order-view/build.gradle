plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id "com.netflix.dgs.codegen" version "6.1.0"
}

group = 'com.jeremyli'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = "11"
}

repositories {
	mavenCentral()
}

def netflix_dgs_version = "5.6.1"

dependencyManagement {
	imports {
		mavenBom("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflix_dgs_version}")
	}
}

dependencies {
	implementation(project(':common')) {
		exclude module: "spring-boot-starter-web"
	}
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.projectreactor.kafka:reactor-kafka'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation "com.netflix.graphql.dgs:graphql-dgs-webflux-starter:${netflix_dgs_version}"
	implementation "com.netflix.graphql.dgs:graphql-dgs-extended-scalars"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

generateJava{
	schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
	packageName = 'com.jeremyli.orderview.graphql' // The package name to use to generate sources
	generateClient = false // Enable generating the type safe query API
	typeMapping = [
	        "BigDecimal": "java.math.BigDecimal"
	]
}

tasks.named('test') {
	useJUnitPlatform()
}

task prepareKotlinBuildScriptModel {

}
